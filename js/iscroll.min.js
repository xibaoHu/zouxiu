/*! iScroll v5.0.0-beta1 ~ (c) 2008-2013 Matteo Spinelli ~ http://cubiq.org/license */ ;
var IScroll = (function(h, a, g) {
	var j = h.requestAnimationFrame || h.webkitRequestAnimationFrame || h.mozRequestAnimationFrame || h.oRequestAnimationFrame || h.msRequestAnimationFrame || function(k) {
		h.setTimeout(k, 1000 / 60)
	};
	var c = (function() {
		var o = {};
		var p = a.createElement("div").style;
		var m = (function() {
			var t = ["t", "webkitT", "MozT", "msT", "OT"],
				r, s = 0,
				q = t.length;
			for(; s < q; s++) {
				r = t[s] + "ransform";
				if(r in p) {
					return t[s].substr(0, t[s].length - 1)
				}
			}
			return false
		})();

		function n(q) {
			if(m === false) {
				return false
			}
			if(m === "") {
				return q
			}
			return m + q.charAt(0).toUpperCase() + q.substr(1)
		}
		o.getTime = Date.now || function k() {
			return new Date().getTime()
		};
		o.extend = function(s, r) {
			for(var q in r) {
				s[q] = r[q]
			}
		};
		o.addEvent = function(t, s, r, q) {
			t.addEventListener(s, r, !!q)
		};
		o.removeEvent = function(t, s, r, q) {
			t.removeEventListener(s, r, !!q)
		};
		o.momentum = function(x, s, t, q, y) {
			var r = x - s,
				u = g.abs(r) / t,
				z, v, w = 0.0006;
			z = x + (u * u) / (2 * w) * (r < 0 ? -1 : 1);
			v = u / w;
			if(z < q) {
				z = y ? q - (y / 2.5 * (u / 8)) : q;
				r = g.abs(z - x);
				v = r / u
			} else {
				if(z > 0) {
					z = y ? y / 2.5 * (u / 8) : 0;
					r = g.abs(x) + z;
					v = r / u
				}
			}
			return {
				destination: g.round(z),
				duration: v
			}
		};
		var l = n("transform");
		o.extend(o, {
			hasTransform: l !== false,
			hasPerspective: n("perspective") in p,
			hasTouch: "ontouchstart" in h,
			hasPointer: navigator.msPointerEnabled,
			hasTransition: n("transition") in p
		});
		o.extend(o.style = {}, {
			transform: l,
			transitionTimingFunction: n("transitionTimingFunction"),
			transitionDuration: n("transitionDuration"),
			transformOrigin: n("transformOrigin")
		});
		o.hasClass = function(r, s) {
			var q = new RegExp("(^|\\s)" + s + "(\\s|$)");
			return q.test(r.className)
		};
		o.addClass = function(r, s) {
			if(o.hasClass(r, s)) {
				return
			}
			var q = r.className.split(" ");
			q.push(s);
			r.className = q.join(" ")
		};
		o.removeClass = function(r, s) {
			if(!o.hasClass(r, s)) {
				return
			}
			var q = new RegExp("(^|\\s)" + s + "(\\s|$)", "g");
			r.className = r.className.replace(q, "")
		};
		o.offset = function(q) {
			var s = -q.offsetLeft,
				r = -q.offsetTop;
			while(q = q.offsetParent) {
				s -= q.offsetLeft;
				r -= q.offsetTop
			}
			return {
				left: s,
				top: r
			}
		};
		o.extend(o.eventType = {}, {
			touchstart: 1,
			touchmove: 1,
			touchend: 1,
			mousedown: 2,
			mousemove: 2,
			mouseup: 2,
			MSPointerDown: 3,
			MSPointerMove: 3,
			MSPointerUp: 3
		});
		o.extend(o.ease = {}, {
			quadratic: {
				style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
				fn: function(q) {
					return q * (2 - q)
				}
			},
			circular: {
				style: "cubic-bezier(0.1, 0.57, 0.1, 1)",
				fn: function(q) {
					return g.sqrt(1 - (--q * q))
				}
			},
			back: {
				style: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
				fn: function(r) {
					var q = 4;
					return(r = r - 1) * r * ((q + 1) * r + q) + 1
				}
			},
			bounce: {
				style: "",
				fn: function(q) {
					if((q /= 1) < (1 / 2.75)) {
						return 7.5625 * q * q
					} else {
						if(q < (2 / 2.75)) {
							return 7.5625 * (q -= (1.5 / 2.75)) * q + 0.75
						} else {
							if(q < (2.5 / 2.75)) {
								return 7.5625 * (q -= (2.25 / 2.75)) * q + 0.9375
							} else {
								return 7.5625 * (q -= (2.625 / 2.75)) * q + 0.984375
							}
						}
					}
				}
			},
			elastic: {
				style: "",
				fn: function(q) {
					f = 0.225;
					e = 1;
					if(q === 0) {
						return 0
					}
					if(q == 1) {
						return 1
					}
					return(e * g.pow(2, -10 * q) * g.sin((q - f / 4) * (2 * g.PI) / f) + 1)
				}
			}
		});
		o.tap = function(s, q) {
			var r = a.createEvent("Event");
			r.initEvent(q, true, true);
			r.pageX = s.pageX;
			r.pageY = s.pageY;
			s.target.dispatchEvent(r)
		};
		o.click = function(s) {
			var r = s.target,
				q;
			if(r.tagName != "SELECT" && r.tagName != "INPUT" && r.tagName != "TEXTAREA") {
				q = a.createEvent("MouseEvents");
				q.initMouseEvent("click", true, true, s.view, 1, r.screenX, r.screenY, r.clientX, r.clientY, s.ctrlKey, s.altKey, s.shiftKey, s.metaKey, 0, null);
				q._constructed = true;
				r.dispatchEvent(q)
			}
		};
		return o
	})();

	function i(m, k) {
		this.wrapper = typeof m == "string" ? a.querySelector(m) : m;
		this.scroller = this.wrapper.children[0];
		this.scrollerStyle = this.scroller.style;
		this.options = {
			resizeIndicator: true,
			snapThreshold: 10,
			startX: 0,
			startY: 0,
			scrollY: true,
			lockDirection: true,
			directionLockThreshold: 5,
			momentum: true,
			bounce: true,
			bounceTime: 600,
			bounceEasing: "",
			preventDefault: false,
			HWCompositing: true,
			useTransition: true,
			useTransform: true
		};
		for(var l in k) {
			this.options[l] = k[l]
		}
		this.translateZ = this.options.HWCompositing && c.hasPerspective ? " translateZ(0)" : "";
		this.options.useTransition = c.hasTransition && this.options.useTransition;
		this.options.useTransform = c.hasTransform && this.options.useTransform;
		this.options.eventPassthrough = this.options.eventPassthrough === true ? "vertical" : this.options.eventPassthrough;
		this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;
		this.options.scrollY = this.options.eventPassthrough == "vertical" ? false : this.options.scrollY;
		this.options.scrollX = this.options.eventPassthrough == "horizontal" ? false : this.options.scrollX;
		this.options.lockDirection = this.options.lockDirection || this.options.eventPassthrough;
		this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;
		this.options.bounceEasing = typeof this.options.bounceEasing == "string" ? c.ease[this.options.bounceEasing] || c.ease.circular : this.options.bounceEasing;
		if(this.options.tap === true) {
			this.options.tap = "tap"
		}
		this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;
		this.x = 0;
		this.y = 0;
		this._events = {};
		this._init();
		this.refresh();
		this.scrollTo(this.options.startX, this.options.startY);
		this.enable()
	}
	i.prototype = {
		version: "5.0.0-beta1",
		_init: function() {
			this._initEvents();
			if(this.options.scrollbars || this.options.indicators) {
				this._initIndicators()
			}
			if(this.options.mouseWheel) {
				this._initWheel()
			}
			if(this.options.snap) {
				this._initSnap()
			}
			if(this.options.keyBindings) {
				this._initKeys()
			}
		},
		destroy: function() {
			this._initEvents(true);
			this._execEvent("destroy")
		},
		_transitionEnd: function(k) {
			if(k.target != this.scroller) {
				return
			}
			this._transitionTime(0);
			if(!this.resetPosition(this.options.bounceTime)) {
				this._execEvent("scrollEnd")
			}
		},
		_start: function(l) {
			if(!this.enabled || (this.initiated && c.eventType[l.type] !== this.initiated)) {
				return
			}
			if(this.options.preventDefault) {
				l.preventDefault()
			}
			var k = l.touches ? l.touches[0] : l,
				m;
			this.initiated = c.eventType[l.type];
			this.moved = false;
			this.distX = 0;
			this.distY = 0;
			this.directionX = 0;
			this.directionY = 0;
			this.directionLocked = 0;
			this._transitionTime();
			this.isAnimating = false;
			this.startTime = c.getTime();
			if(this.options.useTransition && this.isInTransition) {
				m = this.getComputedPosition();
				this._translate(g.round(m.x), g.round(m.y));
				this.isInTransition = false
			}
			this.startX = this.x;
			this.startY = this.y;
			this.absStartX = this.x;
			this.absStartY = this.y;
			this.pointX = k.pageX;
			this.pointY = k.pageY;
			this._execEvent("scrollStart")
		},
		_move: function(p) {
			if(!this.enabled || c.eventType[p.type] !== this.initiated) {
				return
			}
			if(this.options.preventDefault) {
				p.preventDefault()
			}
			var r = p.touches ? p.touches[0] : p,
				m = r.pageX - this.pointX,
				l = r.pageY - this.pointY,
				q = c.getTime(),
				k, s, o, n;
			this.pointX = r.pageX;
			this.pointY = r.pageY;
			this.distX += m;
			this.distY += l;
			o = g.abs(this.distX);
			n = g.abs(this.distY);
			if(q - this.endTime > 300 && (o < 10 && n < 10)) {
				return
			}
			if(!this.directionLocked && this.options.lockDirection) {
				if(o > n + this.options.directionLockThreshold) {
					this.directionLocked = "h"
				} else {
					if(n >= o + this.options.directionLockThreshold) {
						this.directionLocked = "v"
					} else {
						this.directionLocked = 0
					}
				}
			}
			if(this.directionLocked == "h") {
				if(this.options.eventPassthrough == "vertical") {
					p.preventDefault()
				} else {
					if(this.options.eventPassthrough == "horizontal") {
						this.initiated = false;
						return
					}
				}
				l = 0
			} else {
				if(this.directionLocked == "v") {
					if(this.options.eventPassthrough == "horizontal") {
						p.preventDefault()
					} else {
						if(this.options.eventPassthrough == "vertical") {
							this.initiated = false;
							return
						}
					}
					m = 0
				}
			}
			k = this.x + (this.hasHorizontalScroll ? m : 0);
			s = this.y + (this.hasVerticalScroll ? l : 0);
			if(k > 0 || k < this.maxScrollX) {
				k = this.options.bounce ? this.x + m / 3 : k > 0 ? 0 : this.maxScrollX
			}
			if(s > 0 || s < this.maxScrollY) {
				s = this.options.bounce ? this.y + l / 3 : s > 0 ? 0 : this.maxScrollY
			}
			this.directionX = m > 0 ? -1 : m < 0 ? 1 : 0;
			this.directionY = l > 0 ? -1 : l < 0 ? 1 : 0;
			this.moved = true;
			this._translate(k, s);
			if(q - this.startTime > 300) {
				this.startTime = q;
				this.startX = this.x;
				this.startY = this.y
			}
		},
		_end: function(q) {
			if(!this.enabled || c.eventType[q.type] !== this.initiated) {
				return
			}
			if(this.options.preventDefault) {
				q.preventDefault()
			}
			var s = q.changedTouches ? q.changedTouches[0] : q,
				m, l, p = c.getTime() - this.startTime,
				k = g.round(this.x),
				t = g.round(this.y),
				n = 0,
				r = "";
			this.isInTransition = 0;
			this.initiated = 0;
			this.endTime = c.getTime();
			if(this.resetPosition(this.options.bounceTime)) {
				return
			}
			if(!this.moved) {
				if(this.options.tap) {
					c.tap(q, this.options.tap)
				}
				if(this.options.click) {
					c.click(q)
				}
				return
			}
			if(this.options.momentum && p < 300) {
				m = this.hasHorizontalScroll ? c.momentum(this.x, this.startX, p, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0) : {
					destination: k,
					duration: 0
				};
				l = this.hasVerticalScroll ? c.momentum(this.y, this.startY, p, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0) : {
					destination: t,
					duration: 0
				};
				k = m.destination;
				t = l.destination;
				n = g.max(m.duration, l.duration);
				this.isInTransition = 1
			}
			if(this.options.snap) {
				var o = this._nearestSnap(k, t);
				this.currentPage = o;
				k = o.x;
				t = o.y;
				n = this.options.snapSpeed || g.max(g.max(g.min(g.abs(k - this.x), 1000), g.min(g.abs(t - this.y), 1000)), 300);
				r = this.options.bounceEasing
			}
			if(k != this.x || t != this.y) {
				if(k > 0 || k < this.maxScrollX || t > 0 || t < this.maxScrollY) {
					r = c.ease.quadratic
				}
				this.scrollTo(k, t, n, r);
				return
			}
			this._execEvent("scrollEnd")
		},
		_resize: function() {
			var k = this;
			clearTimeout(this.resizeTimeout);
			this.resizeTimeout = setTimeout(function() {
				k.refresh();
				k.resetPosition()
			}, 60)
		},
		resetPosition: function(l) {
			if(this.x <= 0 && this.x >= this.maxScrollX && this.y <= 0 && this.y >= this.maxScrollY) {
				return false
			}
			var k = this.x,
				m = this.y;
			l = l || 0;
			if(!this.hasHorizontalScroll || this.x > 0) {
				k = 0
			} else {
				if(this.x < this.maxScrollX) {
					k = this.maxScrollX
				}
			}
			if(!this.hasVerticalScroll || this.y > 0) {
				m = 0
			} else {
				if(this.y < this.maxScrollY) {
					m = this.maxScrollY
				}
			}
			this.scrollTo(k, m, l, this.options.bounceEasing);
			return true
		},
		disable: function() {
			this.enabled = false
		},
		enable: function() {
			this.enabled = true
		},
		refresh: function() {
			var k = this.wrapper.offsetHeight;
			this.wrapperWidth = this.wrapper.clientWidth;
			this.wrapperHeight = this.wrapper.clientHeight;
			this.scrollerWidth = this.scroller.offsetWidth;
			this.scrollerHeight = this.scroller.offsetHeight;
			this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
			this.maxScrollY = this.wrapperHeight - this.scrollerHeight;
			if(this.maxScrollX > 0) {
				this.maxScrollX = 0
			}
			if(this.maxScrollY > 0) {
				this.maxScrollY = 0
			}
			this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
			this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;
			this.endTime = 0;
			this._execEvent("refresh")
		},
		on: function(l, k) {
			if(!this._events[l]) {
				this._events[l] = []
			}
			this._events[l].push(k)
		},
		_execEvent: function(n) {
			if(!this._events[n]) {
				return
			}
			var m = 0,
				k = this._events[n].length;
			if(!k) {
				return
			}
			for(; m < k; m++) {
				this._events[n][m].call(this)
			}
		},
		scrollBy: function(k, n, l, m) {
			k = this.x + k;
			n = this.y + n;
			l = l || 0;
			this.scrollTo(k, n, l, m)
		},
		scrollTo: function(k, n, l, m) {
			m = m || c.ease.circular;
			if(!l || (this.options.useTransition && m.style)) {
				this._transitionTimingFunction(m.style);
				this._transitionTime(l);
				this._translate(k, n)
			} else {
				this._animate(k, n, l, m.fn)
			}
		},
		_transitionTime: function(k) {
			k = k || 0;
			this.scrollerStyle[c.style.transitionDuration] = k + "ms";
			if(this.indicator1) {
				this.indicator1.transitionTime(k)
			}
			if(this.indicator2) {
				this.indicator2.transitionTime(k)
			}
		},
		_transitionTimingFunction: function(k) {
			this.scrollerStyle[c.style.transitionTimingFunction] = k;
			if(this.indicator1) {
				this.indicator1.transitionTimingFunction(k)
			}
			if(this.indicator2) {
				this.indicator2.transitionTimingFunction(k)
			}
		},
		_translate: function(k, l) {
			if(this.options.useTransform) {
				this.scrollerStyle[c.style.transform] = "translate(" + k + "px," + l + "px)" + this.translateZ
			} else {
				k = g.round(k);
				l = g.round(l);
				this.scrollerStyle.left = k + "px";
				this.scrollerStyle.top = l + "px"
			}
			this.x = k;
			this.y = l;
			if(this.indicator1) {
				this.indicator1.updatePosition()
			}
			if(this.indicator2) {
				this.indicator2.updatePosition()
			}
		},
		_initEvents: function(k) {
			var l = k ? c.removeEvent : c.addEvent,
				m = this.options.bindToWrapper ? this.wrapper : h;
			l(h, "orientationchange", this);
			l(h, "resize", this);
			l(this.wrapper, "mousedown", this);
			l(m, "mousemove", this);
			l(m, "mousecancel", this);
			l(m, "mouseup", this);
			if(c.hasPointer) {
				l(this.wrapper, "MSPointerDown", this);
				l(m, "MSPointerMove", this);
				l(m, "MSPointerCancel", this);
				l(m, "MSPointerUp", this)
			}
			if(c.hasTouch) {
				l(this.wrapper, "touchstart", this);
				l(m, "touchmove", this);
				l(m, "touchcancel", this);
				l(m, "touchend", this)
			}
			l(this.scroller, "transitionend", this);
			l(this.scroller, "webkitTransitionEnd", this);
			l(this.scroller, "oTransitionEnd", this);
			l(this.scroller, "MSTransitionEnd", this)
		},
		getComputedPosition: function() {
			var l = h.getComputedStyle(this.scroller, null),
				k, m;
			if(this.options.useTransform) {
				l = l[c.style.transform].split(")")[0].split(", ");
				k = +(l[12] || l[4]);
				m = +(l[13] || l[5])
			} else {
				k = +l.left.replace(/[^-\d]/g, "");
				m = +l.top.replace(/[^-\d]/g, "")
			}
			return {
				x: k,
				y: m
			}
		},
		_initIndicators: function() {
			var k = this.options.interactiveScrollbars,
				l = typeof this.options.scrollbars != "object",
				n, m;
			if(this.options.scrollbars) {
				if(this.options.scrollY) {
					n = {
						el: d("v", k, this.options.scrollbars),
						interactive: k,
						defaultScrollbars: true,
						resize: this.options.resizeIndicator,
						listenX: false
					};
					this.wrapper.appendChild(n.el)
				}
				if(this.options.scrollX) {
					m = {
						el: d("h", k, this.options.scrollbars),
						interactive: k,
						defaultScrollbars: true,
						resize: this.options.resizeIndicator,
						listenY: false
					};
					this.wrapper.appendChild(m.el)
				}
			} else {
				n = this.options.indicators.length ? this.options.indicators[0] : this.options.indicators;
				m = this.options.indicators[1] && this.options.indicators[1]
			}
			if(n) {
				this.indicator1 = new b(this, n)
			}
			if(m) {
				this.indicator2 = new b(this, m)
			}
			this.on("refresh", function() {
				if(this.indicator1) {
					this.indicator1.refresh()
				}
				if(this.indicator2) {
					this.indicator2.refresh()
				}
			});
			this.on("destroy", function() {
				if(this.indicator1) {
					this.indicator1.destroy()
				}
				if(this.indicator2) {
					this.indicator2.destroy()
				}
			})
		},
		_initWheel: function() {
			c.addEvent(this.wrapper, "mousewheel", this);
			c.addEvent(this.wrapper, "DOMMouseScroll", this);
			this.on("destroy", function() {
				c.removeEvent(this.wrapper, "mousewheel", this);
				c.removeEvent(this.wrapper, "DOMMouseScroll", this)
			})
		},
		_wheel: function(o) {
			var m, l, p, n, k = this;
			clearTimeout(this.wheelTimeout);
			this.wheelTimeout = setTimeout(function() {
				k._execEvent("scrollEnd")
			}, 400);
			o.preventDefault();
			if("wheelDeltaX" in o) {
				m = o.wheelDeltaX / g.abs(o.wheelDeltaX) || 0;
				l = o.wheelDeltaY / g.abs(o.wheelDeltaY) || 0
			} else {
				if("wheelDelta" in o) {
					m = l = o.wheelDelta / g.abs(o.wheelDelta)
				} else {
					if("detail" in o) {
						m = l = -(o.detail / g.abs(o.detail))
					} else {
						return
					}
				}
			}
			m *= 12;
			l *= 12;
			if(!this.hasVerticalScroll) {
				m = l
			}
			p = this.x + (this.hasHorizontalScroll ? m * this.options.invertWheelDirection : 0);
			n = this.y + (this.hasVerticalScroll ? l * this.options.invertWheelDirection : 0);
			if(p > 0) {
				p = 0
			} else {
				if(p < this.maxScrollX) {
					p = this.maxScrollX
				}
			}
			if(n > 0) {
				n = 0
			} else {
				if(n < this.maxScrollY) {
					n = this.maxScrollY
				}
			}
			this.scrollTo(p, n, 0)
		},
		_initSnap: function() {
			this.pages = [];
			this.currentPage = {};
			this.on("refresh", function() {
				var t = 0,
					r, p = 0,
					o, s, q, v = 0,
					u, z = this.options.snapStepX || this.wrapperWidth,
					w = this.options.snapStepY || this.wrapperHeight,
					k;
				if(this.options.snap === true) {
					s = g.round(z / 2);
					q = g.round(w / 2);
					while(v >= -this.scrollerWidth) {
						this.pages[t] = [];
						r = 0;
						u = 0;
						while(u >= -this.scrollerHeight) {
							this.pages[t][r] = {
								x: g.max(v, this.maxScrollX),
								y: g.max(u, this.maxScrollY),
								cx: v - s,
								cy: u - q
							};
							u -= w;
							r++
						}
						v -= z;
						t++
					}
				} else {
					k = this.options.snap;
					r = k.length;
					o = -1;
					for(; t < r; t++) {
						if(k[t].offsetLeft === 0) {
							p = 0;
							o++
						}
						if(!this.pages[p]) {
							this.pages[p] = []
						}
						v = g.max(-k[t].offsetLeft, this.maxScrollX);
						u = g.max(-k[t].offsetTop, this.maxScrollY);
						s = v - g.round(k[t].offsetWidth / 2);
						q = u - g.round(k[t].offsetHeight / 2);
						this.pages[p][o] = {
							x: v,
							y: u,
							cx: s,
							cy: q
						};
						p++
					}
				}
				this.currentPage = {
					x: this.pages[0][0].x,
					y: this.pages[0][0].y,
					pageX: 0,
					pageY: 0
				}
			})
		},
		_nearestSnap: function(n, q) {
			var p = 0,
				o = this.pages.length,
				k = 0;
			if(g.abs(n - this.absStartX) < this.options.snapThreshold && g.abs(q - this.absStartY) < this.options.snapThreshold) {
				return this.currentPage
			}
			for(; p < o; p++) {
				if(n >= this.pages[p][0].cx) {
					n = this.pages[p][0].x;
					break
				}
			}
			o = this.pages[p].length;
			for(; k < o; k++) {
				if(q >= this.pages[0][k].cy) {
					q = this.pages[0][k].y;
					break
				}
			}
			if(p == this.currentPage.pageX) {
				p += this.directionX;
				if(p < 0) {
					p = 0
				} else {
					if(p >= this.pages.length) {
						p = this.pages.length - 1
					}
				}
				n = this.pages[p][0].x
			}
			if(k == this.currentPage.pageY) {
				k += this.directionY;
				if(k < 0) {
					k = 0
				} else {
					if(k >= this.pages[0].length) {
						k = this.pages[0].length - 1
					}
				}
				q = this.pages[0][k].y
			}
			return {
				x: n,
				y: q,
				pageX: p,
				pageY: k
			}
		},
		goToPage: function(k, p, l, o) {
			if(k >= this.pages.length) {
				k = this.pages.length - 1
			} else {
				if(k < 0) {
					k = 0
				}
			}
			if(p >= this.pages[0].length) {
				p = this.pages[0].length - 1
			} else {
				if(p < 0) {
					p = 0
				}
			}
			var n = this.pages[k][p].x,
				m = this.pages[k][p].y;
			l = l || this.options.snapSpeed || g.max(g.max(g.min(g.abs(n - this.x), 1000), g.min(g.abs(m - this.y), 1000)), 300);
			this.currentPage = {
				x: n,
				y: m,
				pageX: k,
				pageY: p
			};
			this.scrollTo(n, m, l, o)
		},
		next: function(l, n) {
			var k = this.currentPage.pageX,
				m = this.currentPage.pageY;
			k += this.hasHorizontalScroll ? 1 : 0;
			m += this.hasVericalScroll ? 1 : 0;
			this.goToPage(k, m, l, n)
		},
		prev: function(l, n) {
			var k = this.currentPage.pageX,
				m = this.currentPage.pageY;
			k -= this.hasHorizontalScroll ? 1 : 0;
			m -= this.hasVericalScroll ? 1 : 0;
			this.goToPage(k, m, l, n)
		},
		_initKeys: function(m) {
			var l = {
				pageUp: 33,
				pageDown: 34,
				end: 35,
				home: 36,
				left: 37,
				up: 38,
				right: 39,
				down: 40
			};
			var k;
			if(typeof this.options.keyBindings == "object") {
				for(k in this.options.keyBindings) {
					if(typeof this.options.keyBindings[k] == "string") {
						this.options.keyBindings[k] = this.options.keyBindings[k].toUpperCase().charCodeAt(0)
					}
				}
			} else {
				this.options.keyBindings = {}
			}
			for(k in l) {
				this.options.keyBindings[k] = this.options.keyBindings[k] || l[k]
			}
			c.addEvent(h, "keydown", this);
			this.on("destroy", function() {
				c.removeEvent(h, "keydown", this)
			})
		},
		_key: function(p) {
			var k = this.options.snap,
				q = k ? this.currentPage.pageX : this.x,
				o = k ? this.currentPage.pageY : this.y,
				m = c.getTime(),
				l = this.keyTime || 0,
				n = 0.25,
				r;
			if(this.options.useTransition && this.isInTransition) {
				r = this.getComputedPosition();
				this._translate(g.round(r.x), g.round(r.y));
				this.isInTransition = false
			}
			this.keyAcceleration = m - l < 200 ? g.min(this.keyAcceleration + n, 50) : 0;
			switch(p.keyCode) {
				case this.options.keyBindings.pageUp:
					if(this.hasHorizontalScroll && !this.hasVerticalScroll) {
						q += k ? 1 : this.wrapperWidth
					} else {
						o += k ? 1 : this.wrapperHeight
					}
					break;
				case this.options.keyBindings.pageDown:
					if(this.hasHorizontalScroll && !this.hasVerticalScroll) {
						q -= k ? 1 : this.wrapperWidth
					} else {
						o -= k ? 1 : this.wrapperHeight
					}
					break;
				case this.options.keyBindings.end:
					q = k ? this.pages.length - 1 : this.maxScrollX;
					o = k ? this.pages[0].length - 1 : this.maxScrollY;
					break;
				case this.options.keyBindings.home:
					q = 0;
					o = 0;
					break;
				case this.options.keyBindings.left:
					q += k ? -1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.up:
					o += k ? 1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.right:
					q -= k ? -1 : 5 + this.keyAcceleration >> 0;
					break;
				case this.options.keyBindings.down:
					o -= k ? 1 : 5 + this.keyAcceleration >> 0;
					break
			}
			if(k) {
				this.goToPage(q, o);
				return
			}
			if(q > 0) {
				q = 0;
				this.keyAcceleration = 0
			} else {
				if(q < this.maxScrollX) {
					q = this.maxScrollX;
					this.keyAcceleration = 0
				}
			}
			if(o > 0) {
				o = 0;
				this.keyAcceleration = 0
			} else {
				if(o < this.maxScrollY) {
					o = this.maxScrollY;
					this.keyAcceleration = 0
				}
			}
			this.scrollTo(q, o, 0);
			this.keyTime = m
		},
		_animate: function(t, s, n, k) {
			var q = this,
				p = this.x,
				o = this.y,
				l = c.getTime(),
				r = l + n;

			function m() {
				var u = c.getTime(),
					w, v, x;
				if(u >= r) {
					q.isAnimating = false;
					q._translate(t, s);
					q.resetPosition(q.options.bounceTime);
					return
				}
				u = (u - l) / n;
				x = k(u);
				w = (t - p) * x + p;
				v = (s - o) * x + o;
				q._translate(w, v);
				if(q.isAnimating) {
					j(m)
				}
			}
			this.isAnimating = true;
			m()
		},
		handleEvent: function(k) {
			switch(k.type) {
				case "touchstart":
				case "MSPointerDown":
				case "mousedown":
					this._start(k);
					break;
				case "touchmove":
				case "MSPointerMove":
				case "mousemove":
					this._move(k);
					break;
				case "touchend":
				case "MSPointerUp":
				case "mouseup":
				case "touchcancel":
				case "MSPointerCancel":
				case "mousecancel":
					this._end(k);
					break;
				case "orientationchange":
				case "resize":
					this._resize();
					break;
				case "transitionend":
				case "webkitTransitionEnd":
				case "oTransitionEnd":
				case "MSTransitionEnd":
					this._transitionEnd(k);
					break;
				case "DOMMouseScroll":
				case "mousewheel":
					this._wheel(k);
					break;
				case "keydown":
					this._key(k);
					break
			}
		}
	};

	function d(n, l, m) {
		var o = a.createElement("div"),
			k = a.createElement("div");
		if(m === true) {
			o.style.cssText = "position:absolute;z-index:9999";
			k.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px"
		}
		k.className = "iScrollIndicator";
		if(n == "h") {
			if(m === true) {
				o.style.cssText += ";height:7px;left:2px;right:2px;bottom:0";
				k.style.height = "100%"
			}
			o.className = "iScrollHorizontalScrollbar"
		} else {
			if(m === true) {
				o.style.cssText += ";width:7px;bottom:2px;top:2px;right:1px";
				k.style.width = "100%"
			}
			o.className = "iScrollVerticalScrollbar"
		}
		if(!l) {
			o.style.pointerEvents = "none"
		}
		o.appendChild(k);
		return o
	}

	function b(k, l) {
		this.wrapper = typeof l.el == "string" ? a.querySelector(l.el) : l.el;
		this.indicator = this.wrapper.children[0];
		this.indicatorStyle = this.indicator.style;
		this.scroller = k;
		this.options = {
			listenX: true,
			listenY: true,
			interactive: false,
			resize: true,
			defaultScrollbars: false,
			speedRatioX: 0,
			speedRatioY: 0
		};
		for(var m in l) {
			this.options[m] = l[m]
		}
		if(this.options.interactive) {
			c.addEvent(this.indicator, "touchstart", this);
			c.addEvent(this.indicator, "MSPointerDown", this);
			c.addEvent(this.indicator, "mousedown", this);
			c.addEvent(h, "touchend", this);
			c.addEvent(h, "MSPointerMove", this);
			c.addEvent(h, "mouseup", this)
		}
	}
	b.prototype = {
		handleEvent: function(k) {
			switch(k.type) {
				case "touchstart":
				case "MSPointerDown":
				case "mousedown":
					this._start(k);
					break;
				case "touchmove":
				case "MSPointerMove":
				case "mousemove":
					this._move(k);
					break;
				case "touchend":
				case "MSPointerUp":
				case "mouseup":
					this._end(k);
					break;
				case "touchcancel":
				case "MSPointerCancel":
				case "mousecancel":
					this._end(k);
					break
			}
		},
		destroy: function() {
			if(this.options.interactive) {
				c.removeEvent(this.indicator, "touchstart", this);
				c.removeEvent(this.indicator, "MSPointerDown", this);
				c.removeEvent(this.indicator, "mousedown", this);
				c.removeEvent(h, "touchmove", this);
				c.removeEvent(h, "MSPointerMove", this);
				c.removeEvent(h, "mousemove", this);
				c.removeEvent(h, "touchend", this);
				c.removeEvent(h, "MSPointerMove", this);
				c.removeEvent(h, "mouseup", this)
			}
		},
		_start: function(l) {
			var k = l.touches ? l.touches[0] : l;
			l.preventDefault();
			l.stopPropagation();
			this.transitionTime(0);
			this.lastPointX = k.pageX;
			this.lastPointY = k.pageY;
			this.startTime = c.getTime();
			c.addEvent(h, "touchmove", this);
			c.addEvent(h, "MSPointerMove", this);
			c.addEvent(h, "mousemove", this)
		},
		_move: function(p) {
			var l = p.touches ? p.touches[0] : p,
				m, k, q, o, n = c.getTime();
			m = l.pageX - this.lastPointX;
			this.lastPointX = l.pageX;
			k = l.pageY - this.lastPointY;
			this.lastPointY = l.pageY;
			q = this.x + m;
			o = this.y + k;
			this._pos(q, o);
			p.preventDefault();
			p.stopPropagation()
		},
		_end: function(k) {
			k.preventDefault();
			k.stopPropagation();
			c.removeEvent(h, "touchmove", this);
			c.removeEvent(h, "MSPointerMove", this);
			c.removeEvent(h, "mousemove", this)
		},
		transitionTime: function(k) {
			k = k || 0;
			this.indicatorStyle[c.style.transitionDuration] = k + "ms"
		},
		transitionTimingFunction: function(k) {
			this.indicatorStyle[c.style.transitionTimingFunction] = k
		},
		refresh: function() {
			this.transitionTime(0);
			if(this.options.listenX && !this.options.listenY) {
				this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? "block" : "none"
			} else {
				if(this.options.listenY && !this.options.listenX) {
					this.indicatorStyle.display = this.scroller.hasVerticalScroll ? "block" : "none"
				} else {
					this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? "block" : "none"
				}
			}
			if(this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
				c.addClass(this.wrapper, "iScrollBothScrollbars");
				c.removeClass(this.wrapper, "iScrollLoneScrollbar");
				if(this.options.defaultScrollbars) {
					if(this.options.listenX) {
						this.wrapper.style.right = "8px"
					} else {
						this.wrapper.style.bottom = "8px"
					}
				}
			} else {
				c.removeClass(this.wrapper, "iScrollBothScrollbars");
				c.addClass(this.wrapper, "iScrollLoneScrollbar");
				if(this.options.defaultScrollbars) {
					if(this.options.listenX) {
						this.wrapper.style.right = "2px"
					} else {
						this.wrapper.style.bottom = "2px"
					}
				}
			}
			var k = this.wrapper.offsetHeight;
			if(this.options.listenX) {
				this.wrapperWidth = this.wrapper.clientWidth;
				if(this.options.resize) {
					this.indicatorWidth = g.max(g.round(this.wrapperWidth * this.wrapperWidth / this.scroller.scrollerWidth), 8);
					this.indicatorStyle.width = this.indicatorWidth + "px"
				} else {
					this.indicatorWidth = this.indicator.clientWidth
				}
				this.maxPosX = this.wrapperWidth - this.indicatorWidth;
				this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX))
			}
			if(this.options.listenY) {
				this.wrapperHeight = this.wrapper.clientHeight;
				if(this.options.resize) {
					this.indicatorHeight = g.max(g.round(this.wrapperHeight * this.wrapperHeight / this.scroller.scrollerHeight), 8);
					this.indicatorStyle.height = this.indicatorHeight + "px"
				} else {
					this.indicatorHeight = this.indicator.clientHeight
				}
				this.maxPosY = this.wrapperHeight - this.indicatorHeight;
				this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY))
			}
			this.updatePosition()
		},
		updatePosition: function() {
			var k = g.round(this.sizeRatioX * this.scroller.x) || 0,
				l = g.round(this.sizeRatioY * this.scroller.y) || 0;
			if(!this.options.ignoreBoundaries) {
				if(k < 0) {
					k = 0
				} else {
					if(k > this.maxPosX) {
						k = this.maxPosX
					}
				}
				if(l < 0) {
					l = 0
				} else {
					if(l > this.maxPosY) {
						l = this.maxPosY
					}
				}
			}
			this.x = k;
			this.y = l;
			if(this.scroller.options.useTransform) {
				this.indicatorStyle[c.style.transform] = "translate(" + k + "px," + l + "px)" + this.scroller.translateZ
			} else {
				this.indicatorStyle.left = k + "px";
				this.indicatorStyle.top = l + "px"
			}
		},
		_pos: function(k, l) {
			if(k < 0) {
				k = 0
			} else {
				if(k > this.maxPosX) {
					k = this.maxPosX
				}
			}
			if(l < 0) {
				l = 0
			} else {
				if(l > this.maxPosY) {
					l = this.maxPosY
				}
			}
			this.scroller.scrollTo(g.round(k / this.sizeRatioX), g.round(l / this.sizeRatioY))
		}
	};
	i.ease = c.ease;
	return i
})(window, document, Math);